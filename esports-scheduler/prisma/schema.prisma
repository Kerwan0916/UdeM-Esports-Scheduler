// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* --------------------------- App models --------------------------- */

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  name               String?
  image              String?
  emailVerified      DateTime?
  role               Role     @default(PLAYER)
  passwordHash       String?             // <â€” for Credentials sign-in

  teams              TeamMember[]
  reservationsCreated Reservation[] @relation("UserCreatedReservations")

  // Auth.js relations (Prisma adapter)
  accounts           Account[]
  sessions           Session[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Team {
  id           String         @id @default(cuid())
  name         String
  gameTitle    String
  members      TeamMember[]
  reservations Reservation[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([gameTitle, name], name: "team_gameTitle_name_unique")
}

model TeamMember {
  id         String @id @default(cuid())
  team       Team   @relation(fields: [teamId], references: [id])
  teamId     String
  user       User   @relation(fields: [userId], references: [id])
  userId     String
  roleInTeam String?

  @@unique([teamId, userId])
}

model Computer {
  id           Int            @id @default(autoincrement())
  label        String         @unique
  isActive     Boolean        @default(true)
  reservations Reservation[]
  blackouts    Blackout[]     @relation("ComputerBlackouts")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Reservation {
  id              String   @id @default(cuid())
  team            Team     @relation(fields: [teamId], references: [id])
  teamId          String
  computer        Computer @relation(fields: [computerId], references: [id])
  computerId      Int
  startsAt        DateTime
  endsAt          DateTime
  note            String?

  createdBy       User     @relation("UserCreatedReservations", fields: [createdByUserId], references: [id])
  createdByUserId String

  status          ReservationStatus @default(CONFIRMED)

  groupId         String? // same value for all rows of a multi-PC booking

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([computerId, startsAt, endsAt])
  @@index([groupId]) 
  // (optional) uncomment if you often query by team/time:
  // @@index([teamId, startsAt, endsAt])
}

model Blackout {
  id         String    @id @default(cuid())
  reason     String
  scope      BlackoutScope
  computer   Computer? @relation("ComputerBlackouts", fields: [computerId], references: [id])
  computerId Int?
  startsAt   DateTime
  endsAt     DateTime
  createdAt  DateTime  @default(now())
}

/* ------------------------ Auth.js (NextAuth) ------------------------ */
/* These are the standard models used by @auth/prisma-adapter */

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* ----------------------------- Enums ----------------------------- */

enum Role {
  ADMIN
  MANAGER
  COACH
  PLAYER
}

enum ReservationStatus {
  CONFIRMED
  CANCELLED
}

enum BlackoutScope {
  ALL
  COMPUTER
}